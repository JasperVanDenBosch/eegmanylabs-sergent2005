from __future__ import annotations
from unittest import TestCase


class TriggerTests(TestCase):

    def test_get_number_test(self):
        from experiment.triggers import Triggers
        t = Triggers.get_number(forT2=False, t2Present=False, dualTask=True, longSOA=True)
        self.assertEqual(Triggers.t1_absent_dualTask_longSOA, t)
        t = Triggers.get_number(forT2=False, t2Present=False, dualTask=True, longSOA=False)
        self.assertEqual(Triggers.t1_absent_dualTask_shortSOA, t)
        t = Triggers.get_number(forT2=False, t2Present=False, dualTask=False, longSOA=True)
        self.assertEqual(Triggers.t1_absent_singleTask_longSOA, t)
        t = Triggers.get_number(forT2=False, t2Present=False, dualTask=False, longSOA=False)
        self.assertEqual(Triggers.t1_absent_singleTask_shortSOA, t)
        t = Triggers.get_number(forT2=False, t2Present=True, dualTask=True, longSOA=True)
        self.assertEqual(Triggers.t1_present_dualTask_longSOA, t)
        t = Triggers.get_number(forT2=False, t2Present=True, dualTask=True, longSOA=False)
        self.assertEqual(Triggers.t1_present_dualTask_shortSOA, t)
        t = Triggers.get_number(forT2=False, t2Present=True, dualTask=False, longSOA=True)
        self.assertEqual(Triggers.t1_present_singleTask_longSOA, t)
        t = Triggers.get_number(forT2=False, t2Present=True, dualTask=False, longSOA=False)
        self.assertEqual(Triggers.t1_present_singleTask_shortSOA, t)
        t = Triggers.get_number(forT2=True, t2Present=False, dualTask=True, longSOA=True)
        self.assertEqual(Triggers.t2_absent_dualTask_longSOA, t)
        t = Triggers.get_number(forT2=True, t2Present=False, dualTask=True, longSOA=False)
        self.assertEqual(Triggers.t2_absent_dualTask_shortSOA, t)
        t = Triggers.get_number(forT2=True, t2Present=False, dualTask=False, longSOA=True)
        self.assertEqual(Triggers.t2_absent_singleTask_longSOA, t)
        t = Triggers.get_number(forT2=True, t2Present=False, dualTask=False, longSOA=False)
        self.assertEqual(Triggers.t2_absent_singleTask_shortSOA, t)
        t = Triggers.get_number(forT2=True, t2Present=True, dualTask=True, longSOA=True)
        self.assertEqual(Triggers.t2_present_dualTask_longSOA, t)
        t = Triggers.get_number(forT2=True, t2Present=True, dualTask=True, longSOA=False)
        self.assertEqual(Triggers.t2_present_dualTask_shortSOA, t)
        t = Triggers.get_number(forT2=True, t2Present=True, dualTask=False, longSOA=True)
        self.assertEqual(Triggers.t2_present_singleTask_longSOA, t)
        t = Triggers.get_number(forT2=True, t2Present=True, dualTask=False, longSOA=False)
        self.assertEqual(Triggers.t2_present_singleTask_shortSOA, t)

    def test_get_number_training(self):
        from experiment.triggers import Triggers
        t = Triggers.get_number(training=True, forT2=False, t2Present=False, dualTask=True, longSOA=True)
        self.assertEqual(Triggers.t1_absent_dualTask_longSOA_training, t)
        t = Triggers.get_number(training=True, forT2=False, t2Present=False, dualTask=True, longSOA=False)
        self.assertEqual(Triggers.t1_absent_dualTask_shortSOA_training, t)
        t = Triggers.get_number(training=True, forT2=False, t2Present=False, dualTask=False, longSOA=True)
        self.assertEqual(Triggers.t1_absent_singleTask_longSOA_training, t)
        t = Triggers.get_number(training=True, forT2=False, t2Present=False, dualTask=False, longSOA=False)
        self.assertEqual(Triggers.t1_absent_singleTask_shortSOA_training, t)
        t = Triggers.get_number(training=True, forT2=False, t2Present=True, dualTask=True, longSOA=True)
        self.assertEqual(Triggers.t1_present_dualTask_longSOA_training, t)
        t = Triggers.get_number(training=True, forT2=False, t2Present=True, dualTask=True, longSOA=False)
        self.assertEqual(Triggers.t1_present_dualTask_shortSOA_training, t)
        t = Triggers.get_number(training=True, forT2=False, t2Present=True, dualTask=False, longSOA=True)
        self.assertEqual(Triggers.t1_present_singleTask_longSOA_training, t)
        t = Triggers.get_number(training=True, forT2=False, t2Present=True, dualTask=False, longSOA=False)
        self.assertEqual(Triggers.t1_present_singleTask_shortSOA_training, t)
        t = Triggers.get_number(training=True, forT2=True, t2Present=False, dualTask=True, longSOA=True)
        self.assertEqual(Triggers.t2_absent_dualTask_longSOA_training, t)
        t = Triggers.get_number(training=True, forT2=True, t2Present=False, dualTask=True, longSOA=False)
        self.assertEqual(Triggers.t2_absent_dualTask_shortSOA_training, t)
        t = Triggers.get_number(training=True, forT2=True, t2Present=False, dualTask=False, longSOA=True)
        self.assertEqual(Triggers.t2_absent_singleTask_longSOA_training, t)
        t = Triggers.get_number(training=True, forT2=True, t2Present=False, dualTask=False, longSOA=False)
        self.assertEqual(Triggers.t2_absent_singleTask_shortSOA_training, t)
        t = Triggers.get_number(training=True, forT2=True, t2Present=True, dualTask=True, longSOA=True)
        self.assertEqual(Triggers.t2_present_dualTask_longSOA_training, t)
        t = Triggers.get_number(training=True, forT2=True, t2Present=True, dualTask=True, longSOA=False)
        self.assertEqual(Triggers.t2_present_dualTask_shortSOA_training, t)
        t = Triggers.get_number(training=True, forT2=True, t2Present=True, dualTask=False, longSOA=True)
        self.assertEqual(Triggers.t2_present_singleTask_longSOA_training, t)
        t = Triggers.get_number(training=True, forT2=True, t2Present=True, dualTask=False, longSOA=False)
        self.assertEqual(Triggers.t2_present_singleTask_shortSOA_training, t)

    def test_task_triggers(self):
        from experiment.triggers import Triggers
        self.assertEqual(Triggers.taskT1variant, 1)
        self.assertEqual(Triggers.taskT2visibility, 2)
        self.assertEqual(Triggers.taskT1variant_training, 11)
        self.assertEqual(Triggers.taskT2visibility_training, 12)
